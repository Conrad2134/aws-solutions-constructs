/**
 *  Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { ResourcePart, SynthUtils } from '@aws-cdk/assert';
import { Stack } from '@aws-cdk/core';
import * as defaults from '../';

const _fieldSchema = [{
  name: "id",
  type: "int",
  comment: "Identifier for the record"
}, {
  name: "name",
  type: "string",
  comment: "The name of the record"
}, {
  name: "type",
  type: "string",
  comment: "The type of the record"
}, {
  name: "numericvalue",
  type: "int",
  comment: "Some value associated with the record"
}];

// --------------------------------------------------------------
// Create database by passing props
// --------------------------------------------------------------
test('create default CfnTable with default props', () => {
  const stack = new Stack();
  defaults.DefaultGlueTable(stack, {
    catalogId: 'fakecatalogfortest',
    databaseName: 'fakedatabase',
    tableInput: {
      parameters: {
        classification: 'json'
      },
      storageDescriptor: {
        parameters: {
          endpointUrl: `https://kinesis.${Aws.REGION}.amazonaws.com`,
          streamName: 'testStream',
          typeOfData: 'kinesis'
        }
      }
    }
  });

  expect(SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
  expect(stack).toHaveResourceLike('AWS::Glue:Database', {
    Type: 'AWS::Glue::Database',
    Properties: {
      CatalogId: 'fakecatalogfortest',
      DatabaseInput: {
        Description: 'test description'
      }
    }
  }, ResourcePart.CompleteDefinition);

  expect(stack).toHaveResourceLike('StarogeDescriptor', {
    TableInput: {
      Parameters: {
        Classification: 'json'
      },
      StorageDescriptor: {
        Parameters: {
          endpointUrl: {
            'Fn::Join': [ "", [
              "http://kinesis.", {
                Ref: 'AWS::Region',
              },
              ".amazonaws.com"
            ]]
          }
        },
        streamName: 'testStream',
        typeOfData: "kinesis"
      }
    }
  }, ResourcePart.Properties);
});

// --------------------------------------------------------------
// Create database by passing no props to database (default database)
// --------------------------------------------------------------
test('Create table', () => {
  const stack = new Stack();
  defaults.createGlueTable(stack, defaults.createGlueDatabase(stack), undefined, _fieldSchema, 'kinesis', {
    STREAM_NAME: 'testStream'
  });
  expect(SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
  expect(stack).toHaveResourceLike('AWS::Glue::Database', {
    Type: 'AWS::Glue::Database',
    Properties: {
      CatalogId: {
        Ref: 'AWS::AccountId'
      },
      DatabaseInput: {
        Description: 'An AWS Glue database generated by AWS Solutions Construct'
      }
    }
  });

  expect(stack).toHaveResourceLike('StarogeDescriptor', {
    TableInput: {
      Parameters: {
        Classification: 'json'
      },
      StorageDescriptor: {
        Location: 'testStream',
        Compressed: false,
        serdeInfo: {
          serializationLibrary: "org.openx.data.jsonserde.JsonSerDe",
          parameters: {
            paths: _fieldSchema.map((value) => {
              return value.name;
            }).join(',')
          }
        },
        Parameters: {
          endpointUrl: {
            'Fn::Join': [ "", [
              "http://kinesis.", {
                Ref: 'AWS::Region',
              },
              ".amazonaws.com"
            ]]
          }
        },
        streamName: 'testStream',
        typeOfData: "kinesis"
      }
    }
  }, ResourcePart.Properties);
});

// --------------------------------------------------------------
// Pass an unsupported source type, it should throw an error
// --------------------------------------------------------------
test('error condition', () => {
  const stack = new Stack();
  try {
    const _database = defaults.DefaultGlueDatabase(stack, defaults.DefaultGlueDatabaseProps());
    defaults.DefaultGlueTable(_database, defaults.DefaultGlueTableProps(_database, _fieldSchema, 'SomeSource', {STREAM_NAME: 'somefakestream'}));
  } catch (error) {
    expect(error).toBeInstanceOf(Error);
  }
});